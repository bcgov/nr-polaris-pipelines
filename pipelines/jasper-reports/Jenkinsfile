@Library('polaris')
import ca.bc.gov.nrids.polaris.Podman
import ca.bc.gov.nrids.polaris.BrokerIntention
import ca.bc.gov.nrids.polaris.Vault

def intention
def podman

pipeline {
    agent none
    stages {
        stage('Banner') {
            steps {
	            script {
                    echo "==================="
                    echo "NR Polaris Pipeline"
                    echo "==================="
                    echo ""
                    echo "Standard Jasper report deployment pipeline"
                    echo ""
                    echo "Jenkinsfile: https://github.com/bcgov-nr/polaris-pipelines/blob/main/pipelines/jasper-reports"
                    echo "Ansible Polaris collection: https://github.com/bcgov/nr-polaris-collection"
                    echo ""
                    echo "Developers are expected to review the documentation of all roles used by their Ansible playbook file."
                }
            }
        }
        stage('Checkout app') {
            agent {
                label Podman.AGENT_LABEL_APP
            }
            environment {
                GIT_REPO = "${params.gitRepo}"
                GIT_BRANCH = "${params.gitTag != null && params.gitTag != "" ? params.gitTag : params.gitBranch}"
                GITHUB_PRIVATE_REPO = "${params.githubToken != null && params.githubToken != "" ? 'true' : ''}"
            }
            steps {
                script {
                    sh 'rm -rf app'
                    if (env.GITHUB_PRIVATE_REPO) {
                        env.GITHUB_USER = "${params.githubUser}"
                        env.GITHUB_TOKEN = "${params.githubToken}"
                        wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: env.GITHUB_TOKEN, password: GITHUB_TOKEN]]]) {
                            sh 'git clone --branch ${GIT_BRANCH} https://${GITHUB_USER}:${GITHUB_TOKEN}@${GIT_REPO} app'
                        }
                    } else {
                        sh 'git clone --branch ${GIT_BRANCH} https://${GIT_REPO} app'
                    }
                }
            }
        }
        stage('Deploy to development') {
            agent {
                label Podman.AGENT_LABEL_APP
            }
            environment {
                PROJECT = "${params.project}"
                COMPONENT = "${params.component}"
                GIT_REPO = "${params.gitRepo}"
                GIT_BRANCH = "${params.gitBranch}"
                EVENT_PROVIDER = "${params.eventProvider}"
                HTTPS_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                NO_PROXY = "knox.io.nrs.gov.bc.ca,dlvrapps.nrs.bcgov"
                AUTHFILE = "auth.json"
                ANSIBLE_COLLECTION_VERSION = "${params.ansibleCollectionBranchTag != null && params.ansibleCollectionBranchTag != "" ? ",${params.ansibleCollectionBranchTag}" : ",main"}"
                PODMAN_ANSIBLE_COLLECTION_URL = "github.com/bcgov/nr-polaris-collection.git#polaris/deploy${env.ANSIBLE_COLLECTION_VERSION}"
                PODMAN_ANSIBLE_COLLECTION_PATH = "./collections/ansible_collections"
                CAUSE_USER_ID = "${params.userId != null && params.userId != "" ? params.userId : "github@internal"}"
                CONFIG_ROLE_ID = credentials("knox-jasper-jasper-reports-${params.jasperServerInstance}-prod-role-id")
                APP_ROLE_ID = credentials("knox-${params.project}-${params.component}-dev-role-id")
            }
            steps {
                script {
                    try {
                        echo 'Do development deployment'
                        intention = new BrokerIntention("${params.brokerJwt}", readJSON(file: "app/.jenkins/jasper-reports-intention.json"))
                        intention.setEventDetails(
                            userName: env.CAUSE_USER_ID,
                            url: env.BUILD_URL,
                            provider: env.EVENT_PROVIDER,
                            environment: 'development'
                        )
                        def brokerJwt = "${params.brokerJwt}"
                        intention.open(brokerJwt)
                        intention.startAction("login")
                        def vaultToken = intention.provisionToken("login", CONFIG_ROLE_ID)
                        def vault = new Vault(vaultToken)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/artifactory", env)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/dev", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.startAction("configure")
                        def vaultAppToken = intention.provisionToken("configure", APP_ROLE_ID)
                        def vaultApp = new Vault(vaultAppToken)
                        vaultApp.readToObject("apps/data/dev/${env.PROJECT}/${env.COMPONENT}/development", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.openResponse.actions.each { key, value ->
                            env."ACTION_TOKEN_${key.toUpperCase()}" = "${value.token}"
                        }
                        podman = new Podman(this)
                        podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.sa_username} -p ${env.sa_password}")
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd):/ansible -e PODMAN_*",
                            command: 'ansible-galaxy collection install git+https://${PODMAN_ANSIBLE_COLLECTION_URL} -p ${PODMAN_ANSIBLE_COLLECTION_PATH}')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=dev" --tags create_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=dev" --tags deploy_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=dev" --tags delete_staging_dir')
                        podman.logout(authfile: "${env.AUTHFILE}")
                        vaultApp.revokeToken()
                        vault.revokeToken()
                        intention.endAction("configure")
                        intention.endAction("login")
                        println intention.close(true)
                        intention = null
                    } catch (IllegalStateException ex) {
                        echo "IllegalStateException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (IllegalArgumentException ex) {
                        echo "IllegalArgumentException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (Exception ex) {
                        echo "Other exception occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    }
                }
            }
        }
        stage('Approve test deployment') {
            steps {
	            script {
                    echo "Deployment to test pending approval"
                    def approver = input(message: 'Is this build approved for test?',
                        ok: 'Yes, this build is approved.',
                        submitterParameter: 'approver'
                        )
                    env.TEST_DEPLOYMENT_APPROVER = "${approver}@azureidir".toLowerCase()
                    echo "Deployment approved for test by ${env.TEST_DEPLOYMENT_APPROVER}"
                }
            }
        }
        stage('Deploy to test') {
            agent {
                label Podman.AGENT_LABEL_APP
            }
            environment {
                PROJECT = "${params.project}"
                COMPONENT = "${params.component}"
                GIT_REPO = "${params.gitRepo}"
                GIT_BRANCH = "${params.gitBranch}"
                EVENT_PROVIDER = "${params.eventProvider}"
                HTTPS_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                NO_PROXY = "knox.io.nrs.gov.bc.ca,testapps.nrs.bcgov"
                AUTHFILE = "auth.json"
                ANSIBLE_COLLECTION_VERSION = "${params.ansibleCollectionBranchTag != null && params.ansibleCollectionBranchTag != "" ? ",${params.ansibleCollectionBranchTag}" : ",main"}"
                PODMAN_ANSIBLE_COLLECTION_URL = "github.com/bcgov/nr-polaris-collection.git#polaris/deploy${env.ANSIBLE_COLLECTION_VERSION}"
                PODMAN_ANSIBLE_COLLECTION_PATH = "./collections/ansible_collections"
                CAUSE_USER_ID = "${params.userId != null && params.userId != "" ? params.userId : "github@internal"}"
                CONFIG_ROLE_ID = credentials("knox-jasper-jasper-reports-${params.jasperServerInstance}-prod-role-id")
                APP_ROLE_ID = credentials("knox-${params.project}-${params.component}-test-role-id")
             }
            steps {
                script {
                    try {
                        echo 'Do test deployment'
                        intention = new BrokerIntention("${params.brokerJwt}", readJSON(file: "app/.jenkins/jasper-reports-intention.json"))
                        intention.setEventDetails(
                            userName: env.CAUSE_USER_ID,
                            url: env.BUILD_URL,
                            provider: env.EVENT_PROVIDER,
                            environment: 'test'
                        )
                        def brokerJwt = "${params.brokerJwt}"
                        intention.open(brokerJwt)
                        intention.startAction("login")
                        def vaultToken = intention.provisionToken("login", CONFIG_ROLE_ID)
                        def vault = new Vault(vaultToken)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/artifactory", env)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/test", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.startAction("configure")
                        def vaultAppToken = intention.provisionToken("configure", APP_ROLE_ID)
                        def vaultApp = new Vault(vaultAppToken)
                        vaultApp.readToObject("apps/data/test/${env.PROJECT}/${env.COMPONENT}/test", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.openResponse.actions.each { key, value ->
                            env."ACTION_TOKEN_${key.toUpperCase()}" = "${value.token}"
                        }
                        podman = new Podman(this)
                        podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.sa_username} -p ${env.sa_password}")
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd):/ansible -e PODMAN_*",
                            command: 'ansible-galaxy collection install git+https://${PODMAN_ANSIBLE_COLLECTION_URL} -p ${PODMAN_ANSIBLE_COLLECTION_PATH}')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=test" --tags create_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=test" --tags deploy_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=test" --tags delete_staging_dir')
                        podman.logout(authfile: "${env.AUTHFILE}")
                        vaultApp.revokeToken()
                        vault.revokeToken()
                        intention.endAction("configure")
                        intention.endAction("login")
                        println intention.close(true)
                        intention = null
                    } catch (IllegalStateException ex) {
                        echo "IllegalStateException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (IllegalArgumentException ex) {
                        echo "IllegalArgumentException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (Exception ex) {
                        echo "Other exception occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    }
                }
            }
        }
        stage('Pre-deployment checks for production') {
            agent {
                label Podman.AGENT_LABEL_APP
            }
            steps {
                script {
                    // TODO: Exit pipeline for SNAPSHOT builds, which should NOT proceed beyond the test environment
                    echo 'Do pre-deployment checks for production'
                }
            }
        }
        stage('Approve production deployment') {
            steps {
	            script {
                    echo "Deployment to production pending approval"
                    def approver = input(message: 'Is this build approved for production?',
                        ok: 'Yes, this build is approved.',
                        submitterParameter: 'approver'
                        )
                    env.PRODUCTION_DEPLOYMENT_APPROVER = "${approver}@azureidir".toLowerCase()
                    echo "Deployment approved for production by ${env.PRODUCTION_DEPLOYMENT_APPROVER}"
                }
            }
        }
        stage('Deploy to production') {
            agent {
                label Podman.AGENT_LABEL_APP
            }
            environment {
                PROJECT = "${params.project}"
                COMPONENT = "${params.component}"
                GIT_REPO = "${params.gitRepo}"
                GIT_BRANCH = "${params.gitBranch}"
                EVENT_PROVIDER = "${params.eventProvider}"
                HTTPS_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                NO_PROXY = "knox.io.nrs.gov.bc.ca,apps.nrs.bcgov"
                AUTHFILE = "auth.json"
                ANSIBLE_COLLECTION_VERSION = "${params.ansibleCollectionBranchTag != null && params.ansibleCollectionBranchTag != "" ? ",${params.ansibleCollectionBranchTag}" : ",main"}"
                PODMAN_ANSIBLE_COLLECTION_URL = "github.com/bcgov/nr-polaris-collection.git#polaris/deploy${env.ANSIBLE_COLLECTION_VERSION}"
                PODMAN_ANSIBLE_COLLECTION_PATH = "./collections/ansible_collections"
                CAUSE_USER_ID = "${params.userId != null && params.userId != "" ? params.userId : "github@internal"}"
                CONFIG_ROLE_ID = credentials("knox-jasper-jasper-reports-${params.jasperServerInstance}-prod-role-id")
                APP_ROLE_ID = credentials("knox-${params.project}-${params.component}-prod-role-id")
            }
            steps {
                script {
                    try {
                        echo 'Do production deployment'
                        intention = new BrokerIntention("${params.brokerJwt}", readJSON(file: "app/.jenkins/jasper-reports-intention.json"))
                        intention.setEventDetails(
                            userName: env.CAUSE_USER_ID,
                            url: env.BUILD_URL,
                            provider: env.EVENT_PROVIDER,
                            environment: 'production'
                        )
                        def brokerJwt = "${params.brokerJwt}"
                        intention.open(brokerJwt)
                        intention.startAction("login")
                        def vaultToken = intention.provisionToken("login", CONFIG_ROLE_ID)
                        def vault = new Vault(vaultToken)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/artifactory", env)
                        vault.readToObject("apps/data/prod/jasper/jasper-reports-${params.jasperServerInstance}/prod", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.startAction("configure")
                        def vaultAppToken = intention.provisionToken("configure", APP_ROLE_ID)
                        def vaultApp = new Vault(vaultAppToken)
                        vaultApp.readToObject("apps/data/prod/${env.PROJECT}/${env.COMPONENT}/production", env, keyTransform: { key -> 'PODMAN_' + key })
                        intention.openResponse.actions.each { key, value ->
                            env."ACTION_TOKEN_${key.toUpperCase()}" = "${value.token}"
                        }
                        podman = new Podman(this)
                        podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.sa_username} -p ${env.sa_password}")
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd):/ansible -e PODMAN_*",
                            command: 'ansible-galaxy collection install git+https://${PODMAN_ANSIBLE_COLLECTION_URL} -p ${PODMAN_ANSIBLE_COLLECTION_PATH}')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=prod" --tags create_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=prod" --tags deploy_package')
                        podman.run("willhallonline/ansible:2.17-alpine-3.20",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/collections:/ansible/app/playbooks/collections -v \$(pwd)/app:/ansible/app -e PODMAN_*",
                            command: 'ansible-playbook app/playbooks/jasper-reports.yaml --extra-vars "jasper_env=prod" --tags delete_staging_dir')
                        podman.logout(authfile: "${env.AUTHFILE}")
                        vaultApp.revokeToken()
                        vault.revokeToken()
                        intention.endAction("configure")
                        intention.endAction("login")
                        println intention.close(true)
                        intention = null
                    } catch (IllegalStateException ex) {
                        echo "IllegalStateException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (IllegalArgumentException ex) {
                        echo "IllegalArgumentException occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    } catch (Exception ex) {
                        echo "Other exception occurred: $ex"
                        currentBuild.result = 'ABORTED'
                        error('Quitting')
                    }
                }
            }
        }
    }
    post {
        unstable {
            node(Podman.AGENT_LABEL_APP) {
                script {
                    if (intention) {
                        println intention.close(false)
                    }
                }
            }
        }
        failure {
            node(Podman.AGENT_LABEL_APP) {
                script {
                    if (intention) {
                        println intention.close(false)
                    }
                }
            }
        }
        aborted {
            node(Podman.AGENT_LABEL_APP) {
                script {
                    if (intention) {
                        println  intention.close(true)
                    }
                }
            }
        }
        always {
            node(Podman.AGENT_LABEL_APP) {
                cleanWs(
                    cleanWhenAborted: true,
                    cleanWhenFailure: false,
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: false,
                    deleteDirs: true
                )
            }
        }
    }
}
